// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Float        @id
  joined_at  DateTime     @default(now())
  blocked    Boolean      @default(false)
  wallet     Float        @default(0)
  username   String?
  chatId     Float        @unique
  tapLvl     Int          @default(1)
  energy     Int          @default(250)
  energyLvl  Int          @default(1)
  chargeLvl  Int          @default(1)
  lastTap    DateTime     @default(now())
  lockReward Boolean      @default(false)
  refs       User[]       @relation("Ref")
  refId      Float?
  ref        User?        @relation(fields: [refId], references: [id], onDelete: Cascade, onUpdate: Cascade, "Ref")
  token      String       @unique @default(dbgenerated("(concat(gen_random_uuid(), gen_random_uuid()))::TEXT"))
  UserWallet UserWallet[]
}

model UserWallet {
  id     Int    @id @default(autoincrement())
  user   User   @relation(fields: [userId], references: [id])
  userId Float
  symbol Symbol
  created_at

  @@unique(name: "uniqWallet", [userId, symbol])
}

enum Symbol {
  BNB
  TRX
}

model PermitSignature {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())
  data       Json     @default("{}")
}

model BotChannel {
  id          Int     @id @default(autoincrement())
  botUsername String
  channelId   String
  chatId      String?
  title       String?

  @@unique([botUsername, channelId])
}

model BotSetting {
  id          Int        @default(autoincrement())
  botUsername String
  key         SettingKey
  value       String

  @@unique([botUsername, key])
}

enum SettingKey {
  CHANNEL_LOCK
}
